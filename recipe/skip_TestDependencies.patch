From 09353406a485ac967372e4d6f8c70d445db574f3 Mon Sep 17 00:00:00 2001
From: John Kirkham <jakirkham@gmail.com>
Date: Thu, 24 Oct 2019 22:15:14 -0400
Subject: [PATCH] Drop llvmlite test dependencies

This test is based around static linking of LLVM, which conda-forge no
longer does. So just patch out this test in the conda-forge build.
---
 llvmlite/tests/test_binding.py | 40 ----------------------------------
 1 file changed, 40 deletions(-)

diff --git a/llvmlite/tests/test_binding.py b/llvmlite/tests/test_binding.py
index a7f65348..04602284 100644
--- a/llvmlite/tests/test_binding.py
+++ b/llvmlite/tests/test_binding.py
@@ -208,46 +208,6 @@ def target_machine(self):
         return target.create_target_machine()
 
 
-class TestDependencies(BaseTest):
-    """
-    Test DLL dependencies are within a certain expected set.
-    """
-
-    @unittest.skipUnless(sys.platform.startswith('linux'), "Linux-specific test")
-    @unittest.skipUnless(os.environ.get('LLVMLITE_DIST_TEST'), "Distribution-specific test")
-    def test_linux(self):
-        lib_path = ffi.lib._name
-        env = os.environ.copy()
-        env['LANG'] = 'C'
-        p = subprocess.Popen(["objdump", "-p", lib_path],
-                             stdout=subprocess.PIPE, env=env)
-        out, _ = p.communicate()
-        self.assertEqual(0, p.returncode)
-        # Parse library dependencies
-        lib_pat = re.compile(r'^([-_a-zA-Z0-9]+)\.so(?:\.\d+){0,3}$')
-        deps = set()
-        for line in out.decode().splitlines():
-            parts = line.split()
-            if parts and parts[0] == 'NEEDED':
-                dep = parts[1]
-                m = lib_pat.match(dep)
-                if len(parts) != 2 or not m:
-                    self.fail("invalid NEEDED line: %r" % (line,))
-                deps.add(m.group(1))
-        # Sanity check that our dependencies were parsed ok
-        if 'libc' not in deps or 'libpthread' not in deps:
-            self.fail("failed parsing dependencies? got %r" % (deps,))
-        # Ensure all dependencies are expected
-        allowed = set(['librt', 'libdl', 'libpthread', 'libz', 'libm',
-                       'libgcc_s', 'libc', 'ld-linux', 'ld64'])
-        if platform.python_implementation() == 'PyPy':
-            allowed.add('libtinfo')
-
-        for dep in deps:
-            if not dep.startswith('ld-linux-') and dep not in allowed:
-                self.fail("unexpected dependency %r in %r" % (dep, deps))
-
-
 class TestMisc(BaseTest):
     """
     Test miscellaneous functions in llvm.binding.
